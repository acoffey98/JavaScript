Review:

An if statement checks a condition and will execute a task if that condition evaluates to true.
if...else statements make binary decisions and execute different code blocks based on a provided condition.

We can add more conditions using else if statements.
Comparison operators, including <, >, <=, >=, ===, and !== can compare two values.
The logical and operator, &&, or “and”, checks if both provided expressions are truthy.
The logical operator ||, or “or”, checks if either provided expression is truthy.
The bang operator, !, switches the truthiness and falsiness of a value.
The ternary operator is shorthand to simplify concise if...else statements.
A switch statement can be used to simplify the process of writing multiple else if statements. 
The break keyword stops the remaining cases from being checked and executed in a switch statement.

Default paramaters:

One of the features added in ES6 is the ability to use default parameters. Default parameters allow parameters to have a predetermined value 
in case there is no argument passed into the function or if the argument is undefined when called.
The default parameter is a way to set default values for function parameters a value is no passed in (ie. it is undefined ). 
In a function, Ii a parameter is not provided, then its value becomes undefined . In this case, the default value that we specify is applied by the compiler.

Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.


function greeting (name = 'stranger') {
  console.log(`Hello, ${name}!`)
}

greeting('Nick') // Output: Hello, Nick!
greeting() // Output: Hello, stranger!


In the example above, we used the = operator to assign the parameter name a default value of 'stranger'. This is useful to have in case 
we ever want to include a non-personalized default greeting!

When the code calls greeting('Nick') the value of the argument is passed in and, 'Nick', will override the default parameter of 'stranger' 
to log 'Hello, Nick!' to the console.

When there isn’t an argument passed into greeting(), the default value of 'stranger' 
is used, and 'Hello, stranger!' is logged to the console.

Change the params of makeShoppingLis() into default params:
function makeShoppingList(item1="milk", item2="bread", item3="eggs"){
  console.log(`Remember to buy ${item1}`);
  console.log(`Remember to buy ${item2}`);
  console.log(`Remember to buy ${item3}`);
}

RETURN:
When a function is called, the computer will run through the function’s code 
and evaluate the result of calling the function. By default that resulting value is undefined.

function rectangleArea(width, height) {
  let area = width * height;
}
console.log(rectangleArea(5, 7)) // Prints undefined

In the code example, we defined our function to calculate the area of a width and height parameter. Then rectangleArea() is invoked with the arguments 5 and 7. 
But when we went to print the results we got undefined. Did we write our function wrong? 
No! In fact, the function worked fine, and the computer did calculate the area as 35, but we didn’t capture it. 
So how can we do that? With the keyword return!

function rectangleArea(wight, height){
  let area= width * height;
  return area;
}

To pass back information from the function call, we use a return statement. To create a return statement, we use the return keyword followed by the value that 
we wish to return. Like we saw above, if the value is omitted, undefined is returned instead.

If an argument for width or height is less than 0, then rectangleArea() will 
return 'You need positive integers to calculate area!'. The second return statement width * height will not run.


function calculateRectangleWidth(width, height){
  if(widht < 0 || height <0){
    return 'You need positive integers to calculate area!!!';
    }
   return width * height;
}
The return keyword is powerful because it allows functions to produce an output. We can then save the output to a variable for later use. 


We want to order monitors for everyone in the office and the office is a grid shape:
So We could use a function to help us cacluate the number of monitors needed

(2 params - rows and columns) 

function monitorCount(rows, columns) {
  return rows * columns;
}

const numOfMonitors = monitorCount(5, 4);

console.log(numOfMonitors);



HELPER FUNCTIONS:

If we wanted to define a function that converts the temperature from Celsius to Fahrenheit, we could write two functions like: 

function multiplyByNineFifths(number) {
  return number * (9/5);
};
 
function getFahrenheit(celsius) {
  return multiplyByNineFifths(celsius) + 32;
};
 
getFahrenheit(15); // Returns 59


Figure out how many monitors then figure out cost:

function monitorCount(rows, columns) {
  return rows * columns;
}

function costOfMonitors(rows, columns){
  //calculate the total cost 
  return monitorCount(rows, columns) * 200;
}
//We should save the cost to a variable.
//save the cost to a variable 
const totalCost = costOfMonitors(5,4);

console.log(totalCost) 
returns 4000 


Function expressions:
Another way to define a function is to use function expression
-function keyword 

A function expression is often stored in a variable in order to refer to it..

const calculateArea = function(width, height){
  const area = width * height;
  return area;
  
 }
 
 
 TO declare a variable to make the variables name to be the name, or identiier of your function:
 const keyword to declare variable 
 
To invoke a function expression, write the name of the variable in which the function is stored 
followed by parentheses enclosing any arguments being passed into the function. 

Let’s say we have a plant that we need to water once a week on Wednesdays. We could define a function expression to help us check 
the day of the week and the plant needs to be watered:

    Create a variable named plantNeedsWater using the const variable keyword.
    Assign an anonymous function that takes in a parameter of day to plantNeedsWater.

const plantNeedsWater = function(day){
  if(day == 'Wednesday'){
    return true;
  }
  else{
    return false;
  }
}


//Should return false
console.log(plantNeedsWater('Tuesday'));


//Arrow Functions
ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation. 
Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first 
include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this:

const rectangleArea = (width, height) => {
  let area = width * height;
  return area;
};



const plantNeedsWater = (day) => {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};

Concise Body Arrow Functions 
(ternary operator) 

A function body composed of a single-line block does not need curly braces. 
ex:

const sumNumbers = number => number + number;

Without the curly braces, whatever that line evaluates will be returned. 
The contents of the block should immediately follow the arrow => and the return keyword can 
be removed.
Implicit return


const sumNumbers = number => {
  const sum = number + number; 
  return sum;
 };
 
 
 SO if we have:
 
 const squareNum = (num) => {
  return num * num;
};

We can refactor that to:

const squareNum = num => num * num;

const plantNeedsWater = day => day === 'Wednesday' ? true : false;


SCOPE:


An important idea in programming is scope. Scope defines where variables can be accessed or referenced. 
While some variables can be accessed from anywhere within a program, other variables may only be available in a specific context.

You can think of scope like the view of the night sky from your window. Everyone who lives on the planet Earth is in the global 
scope of the stars. The stars are accessible globally. Meanwhile, if you live in a city, you may see the city skyline or the river. 
The skyline and river are only accessible locally in your city, but you can still see the stars that are available globally.

Over the next few exercises, we’ll explore how scope relates to variables and learn best practices for variable declaration.

We’ve seen blocks used before in functions and if statements. A block is the code found inside a set of curly braces {}. 
Blocks help us group one or more statements together and serve as an important structural marker for our code. 

const logSkyColor = () => {
  let color = 'black';
  console.log(color);
}


GLOBAL SCOPE

Scope is the context in which our variables are declared.. Variables can exist inside or outside of these blocks

In global scope, variables are declared outside of blocks. These variables are called global variables. Because global 
variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.


The next context we’ll cover is block scope. When a variable is defined inside a block, it is only accessible to the code within the curly braces {}. 
We say that variable has block scope because it is only accessible to the lines of code within that block.


In main.js, define a function logVisibleLightWaves(). 

const logVisibleLightWaves = () => {
  const lightWaves = 'Moonlight';
  console.log(lightWaves);
};

logVisibleLightWaves();

// console.log(lightWaves);
























